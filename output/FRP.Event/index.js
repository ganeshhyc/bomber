// Generated by purs version 0.11.7
"use strict";
var $foreign = require("./foreign");
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Plus = require("../Control.Plus");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Either = require("../Data.Either");
var Data_Filterable = require("../Data.Filterable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var FRP = require("../FRP");
var FRP_Event_Class = require("../FRP.Event.Class");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var functorEvent = new Data_Functor.Functor($foreign.mapImpl);
var filterableEvent = new Data_Filterable.Filterable(function () {
    return functorEvent;
}, $foreign.filter, function (f) {
    return function ($3) {
        return Data_Functor.map(functorEvent)(Data_Maybe.fromJust())($foreign.filter(Data_Maybe.isJust)(Data_Functor.map(functorEvent)(f)($3)));
    };
}, function (p) {
    return function (xs) {
        return {
            yes: $foreign.filter(p)(xs),
            no: $foreign.filter(function ($4) {
                return !p($4);
            })(xs)
        };
    };
}, function (f) {
    return function (xs) {
        return {
            left: Data_Filterable.filterMap(filterableEvent)(function ($5) {
                return Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value))(f($5));
            })(xs),
            right: Data_Filterable.filterMap(filterableEvent)(function ($6) {
                return Data_Either.hush(f($6));
            })(xs)
        };
    };
});
var applyEvent = new Control_Apply.Apply(function () {
    return functorEvent;
}, $foreign.applyImpl);
var semigroupEvent = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEvent)(Data_Semigroup.append(dictSemigroup)));
};
var applicativeEvent = new Control_Applicative.Applicative(function () {
    return applyEvent;
}, $foreign.pureImpl);
var monoidEvent = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupEvent(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeEvent)(Data_Monoid.mempty(dictMonoid)));
};
var altEvent = new Control_Alt.Alt(function () {
    return functorEvent;
}, $foreign.mergeImpl);
var plusEvent = new Control_Plus.Plus(function () {
    return altEvent;
}, $foreign.never);
var alternativeEvent = new Control_Alternative.Alternative(function () {
    return applicativeEvent;
}, function () {
    return plusEvent;
});
var eventIsEvent = new FRP_Event_Class.IsEvent(function () {
    return alternativeEvent;
}, function () {
    return filterableEvent;
}, $foreign.fix, $foreign.fold, $foreign.keepLatest, $foreign.sampleOn);
module.exports = {
    functorEvent: functorEvent,
    filterableEvent: filterableEvent,
    applyEvent: applyEvent,
    applicativeEvent: applicativeEvent,
    altEvent: altEvent,
    plusEvent: plusEvent,
    alternativeEvent: alternativeEvent,
    semigroupEvent: semigroupEvent,
    monoidEvent: monoidEvent,
    eventIsEvent: eventIsEvent,
    create: $foreign.create,
    subscribe: $foreign.subscribe
};
