// Generated by purs version 0.11.7
"use strict";
var Data_Array = require("../Data.Array");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Ordering = require("../Data.Ordering");
var Data_Tuple = require("../Data.Tuple");
var Neon_Data = require("../Neon.Data");
var Prelude = require("../Prelude");
var HasEqual = function (equal) {
    this.equal = equal;
};
var unitHasEqual = new HasEqual(function (y) {
    return function (x) {
        return Data_Eq.eq(Data_Eq.eqUnit)(x)(y);
    };
});
var stringHasEqual = new HasEqual(function (y) {
    return function (x) {
        return x === y;
    };
});
var orderingHasEqual = new HasEqual(function (y) {
    return function (x) {
        return Data_Eq.eq(Data_Ordering.eqOrdering)(x)(y);
    };
});
var numberHasEqual = new HasEqual(function (y) {
    return function (x) {
        return x === y;
    };
});
var intHasEqual = new HasEqual(function (y) {
    return function (x) {
        return x === y;
    };
});
var equal = function (dict) {
    return dict.equal;
};
var listHasEqual = function (dictHasEqual) {
    return new HasEqual(function (ys) {
        return function (xs) {
            return Data_List.length(xs) === Data_List.length(ys) && Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
                return equal(dictHasEqual)(v.value1)(v.value0);
            })(Data_List.zip(xs)(ys));
        };
    });
};
var charHasEqual = new HasEqual(function (y) {
    return function (x) {
        return x === y;
    };
});
var booleanHasEqual = new HasEqual(function (y) {
    return function (x) {
        return x === y;
    };
});
var arrayHasEqual = function (dictHasEqual) {
    return new HasEqual(function (ys) {
        return function (xs) {
            return Data_Array.length(xs) === Data_Array.length(ys) && Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
                return equal(dictHasEqual)(v.value1)(v.value0);
            })(Data_Array.zip(xs)(ys));
        };
    });
};
module.exports = {
    equal: equal,
    HasEqual: HasEqual,
    arrayHasEqual: arrayHasEqual,
    booleanHasEqual: booleanHasEqual,
    charHasEqual: charHasEqual,
    intHasEqual: intHasEqual,
    listHasEqual: listHasEqual,
    numberHasEqual: numberHasEqual,
    orderingHasEqual: orderingHasEqual,
    stringHasEqual: stringHasEqual,
    unitHasEqual: unitHasEqual
};
