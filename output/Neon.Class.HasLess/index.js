// Generated by purs version 0.11.7
"use strict";
var Data_List_Types = require("../Data.List.Types");
var Data_Ord = require("../Data.Ord");
var Neon_Class_HasEqual = require("../Neon.Class.HasEqual");
var Neon_Class_HasFromArray = require("../Neon.Class.HasFromArray");
var Neon_Data = require("../Neon.Data");
var Prelude = require("../Prelude");
var HasLess = function (less) {
    this.less = less;
};
var stringHasLess = new HasLess(function (y) {
    return function (x) {
        return x < y;
    };
});
var orderingHasLess = new HasLess(function (y) {
    return function (x) {
        return Data_Ord.lessThan(Data_Ord.ordOrdering)(x)(y);
    };
});
var numberHasLess = new HasLess(function (y) {
    return function (x) {
        return x < y;
    };
});
var less = function (dict) {
    return dict.less;
};
var listHasLess = function (dictHasEqual) {
    return function (dictHasLess) {
        return new HasLess(function (ys) {
            return function (xs) {
                var $4 = {
                    xs: xs,
                    ys: ys
                };
                if ($4.xs instanceof Data_List_Types.Nil && $4.ys instanceof Data_List_Types.Cons) {
                    return true;
                };
                if ($4.xs instanceof Data_List_Types.Cons && $4.ys instanceof Data_List_Types.Cons) {
                    var $9 = Neon_Class_HasEqual.equal(dictHasEqual)($4.ys.value0)($4.xs.value0);
                    if ($9) {
                        return less(listHasLess(dictHasEqual)(dictHasLess))($4.ys.value1)($4.xs.value1);
                    };
                    return less(dictHasLess)($4.ys.value0)($4.xs.value0);
                };
                return false;
            };
        });
    };
};
var intHasLess = new HasLess(function (y) {
    return function (x) {
        return x < y;
    };
});
var charHasLess = new HasLess(function (y) {
    return function (x) {
        return x < y;
    };
});
var booleanHasLess = new HasLess(function (y) {
    return function (x) {
        return x < y;
    };
});
var arrayHasLess = function (dictHasEqual) {
    return function (dictHasLess) {
        return new HasLess(function (ys) {
            return function (xs) {
                var toList = Neon_Class_HasFromArray.fromArray(Neon_Class_HasFromArray.listHasFromArray);
                return less(listHasLess(dictHasEqual)(dictHasLess))(toList(ys))(toList(xs));
            };
        });
    };
};
module.exports = {
    less: less,
    HasLess: HasLess,
    arrayHasLess: arrayHasLess,
    booleanHasLess: booleanHasLess,
    charHasLess: charHasLess,
    intHasLess: intHasLess,
    listHasLess: listHasLess,
    numberHasLess: numberHasLess,
    orderingHasLess: orderingHasLess,
    stringHasLess: stringHasLess
};
