// Generated by purs version 0.11.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Filterable = require("../Data.Filterable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Tuple = require("../Data.Tuple");
var FRP = require("../FRP");
var FRP_Event = require("../FRP.Event");
var FRP_Event_Class = require("../FRP.Event.Class");
var FRP_Event_Time = require("../FRP.Event.Time");
var Prelude = require("../Prelude");
var ABehavior = function (x) {
    return x;
};
var step = function (dictIsEvent) {
    return function (a) {
        return function (e) {
            return FRP_Event_Class.sampleOn(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(a))(e));
        };
    };
};
var unfold = function (dictIsEvent) {
    return function (f) {
        return function (e) {
            return function (a) {
                return step(dictIsEvent)(a)(FRP_Event_Class.fold(dictIsEvent)(f)(e)(a));
            };
        };
    };
};
var sample = function (v) {
    return function (e) {
        return v(e);
    };
};
var functorABehavior = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (e) {
                return v(Data_Functor.map(dictFunctor)(function (v1) {
                    return function ($66) {
                        return v1(f($66));
                    };
                })(e));
            };
        };
    });
};
var sampleBy = function (dictIsEvent) {
    return function (f) {
        return function (b) {
            return function (e) {
                return sample(Data_Functor.map(functorABehavior((dictIsEvent.Filterable1()).Functor0()))(f)(b))(Data_Functor.map((dictIsEvent.Filterable1()).Functor0())(Data_Function.applyFlipped)(e));
            };
        };
    };
};
var gateBy = function (dictIsEvent) {
    return function (f) {
        return function (ps) {
            return function (xs) {
                return Data_Filterable.filtered(dictIsEvent.Filterable1())(sampleBy(dictIsEvent)(function (p) {
                    return function (x) {
                        var $44 = f(p)(x);
                        if ($44) {
                            return new Data_Maybe.Just(x);
                        };
                        return Data_Maybe.Nothing.value;
                    };
                })(ps)(xs));
            };
        };
    };
};
var gate = function (dictIsEvent) {
    return gateBy(dictIsEvent)(Data_Function["const"]);
};
var integral = function (dictIsEvent) {
    return function (dictField) {
        return function (dictSemiring) {
            return function (g) {
                return function (initial) {
                    return function (t) {
                        return function (b) {
                            var two = Data_Semiring.add((((dictField.EuclideanRing0()).CommutativeRing0()).Ring0()).Semiring0())(Data_Semiring.one((((dictField.EuclideanRing0()).CommutativeRing0()).Ring0()).Semiring0()))(Data_Semiring.one((((dictField.EuclideanRing0()).CommutativeRing0()).Ring0()).Semiring0()));
                            var approx = function (v) {
                                return function (s) {
                                    if (v.last instanceof Data_Maybe.Nothing) {
                                        return s;
                                    };
                                    if (v.last instanceof Data_Maybe.Just) {
                                        return Data_Semiring.add(dictSemiring)(s)(g(function (f) {
                                            return Data_EuclideanRing.div(dictField.EuclideanRing0())(Data_Semiring.mul((((dictField.EuclideanRing0()).CommutativeRing0()).Ring0()).Semiring0())(f(Data_Semiring.add(dictSemiring)(v.last.value0.value1)(v.now.value1)))(Data_Ring.sub(((dictField.EuclideanRing0()).CommutativeRing0()).Ring0())(v.now.value0)(v.last.value0.value0)))(two);
                                        }));
                                    };
                                    throw new Error("Failed pattern match at FRP.Behavior line 134, column 5 - line 134, column 35: " + [ v.constructor.name, s.constructor.name ]);
                                };
                            };
                            return function (e) {
                                var x = sample(b)(Data_Functor.voidLeft((dictIsEvent.Filterable1()).Functor0())(e)(Control_Category.id(Control_Category.categoryFn)));
                                var y = FRP_Event_Class.withLast(dictIsEvent)(sampleBy(dictIsEvent)(Data_Tuple.Tuple.create)(t)(x));
                                var z = FRP_Event_Class.fold(dictIsEvent)(approx)(y)(initial);
                                return Control_Apply.apply(((dictIsEvent.Alternative0()).Applicative0()).Apply0())(e)(z);
                            };
                        };
                    };
                };
            };
        };
    };
};
var integral$prime = function (dictIsEvent) {
    return function (dictField) {
        return integral(dictIsEvent)(dictField)((((dictField.EuclideanRing0()).CommutativeRing0()).Ring0()).Semiring0())(function (v) {
            return v(Control_Category.id(Control_Category.categoryFn));
        });
    };
};
var sample_ = function (dictIsEvent) {
    return sampleBy(dictIsEvent)(Data_Function["const"]);
};
var derivative = function (dictIsEvent) {
    return function (dictField) {
        return function (dictRing) {
            return function (g) {
                return function (t) {
                    return function (b) {
                        var approx = function (v) {
                            if (v.last instanceof Data_Maybe.Nothing) {
                                return Data_Semiring.zero(dictRing.Semiring0());
                            };
                            if (v.last instanceof Data_Maybe.Just) {
                                return g(function (f) {
                                    return Data_EuclideanRing.div(dictField.EuclideanRing0())(f(Data_Ring.sub(dictRing)(v.now.value1)(v.last.value0.value1)))(Data_Ring.sub(((dictField.EuclideanRing0()).CommutativeRing0()).Ring0())(v.now.value0)(v.last.value0.value0));
                                });
                            };
                            throw new Error("Failed pattern match at FRP.Behavior line 179, column 5 - line 179, column 36: " + [ v.constructor.name ]);
                        };
                        return function (e) {
                            var x = sample(b)(Data_Functor.voidLeft((dictIsEvent.Filterable1()).Functor0())(e)(Control_Category.id(Control_Category.categoryFn)));
                            var y = FRP_Event_Class.withLast(dictIsEvent)(sampleBy(dictIsEvent)(Data_Tuple.Tuple.create)(t)(x));
                            var z = Data_Functor.map((dictIsEvent.Filterable1()).Functor0())(approx)(y);
                            return Control_Apply.apply(((dictIsEvent.Alternative0()).Applicative0()).Apply0())(e)(z);
                        };
                    };
                };
            };
        };
    };
};
var derivative$prime = function (dictIsEvent) {
    return function (dictField) {
        return derivative(dictIsEvent)(dictField)(((dictField.EuclideanRing0()).CommutativeRing0()).Ring0())(function (v) {
            return v(Control_Category.id(Control_Category.categoryFn));
        });
    };
};
var behavior = ABehavior;
var fixB = function (a) {
    return function (f) {
        return behavior(function (s) {
            return FRP_Event_Class.fix(FRP_Event.eventIsEvent)(function (event) {
                var b = f(step(FRP_Event.eventIsEvent)(a)(event));
                return {
                    input: sample_(FRP_Event.eventIsEvent)(b)(s),
                    output: FRP_Event_Class.sampleOn(FRP_Event.eventIsEvent)(event)(s)
                };
            });
        });
    };
};
var solve = function (dictField) {
    return function (dictSemiring) {
        return function (g) {
            return function (a0) {
                return function (t) {
                    return function (f) {
                        return fixB(a0)(function (b) {
                            return integral(FRP_Event.eventIsEvent)(dictField)(dictSemiring)(g)(a0)(t)(f(b));
                        });
                    };
                };
            };
        };
    };
};
var solve$prime = function (dictField) {
    return solve(dictField)((((dictField.EuclideanRing0()).CommutativeRing0()).Ring0()).Semiring0())(function (v) {
        return v(Control_Category.id(Control_Category.categoryFn));
    });
};
var solve2 = function (dictField) {
    return function (dictSemiring) {
        return function (g) {
            return function (a0) {
                return function (da0) {
                    return function (t) {
                        return function (f) {
                            return fixB(a0)(function (b) {
                                return integral(FRP_Event.eventIsEvent)(dictField)(dictSemiring)(g)(a0)(t)(fixB(da0)(function (db) {
                                    return integral(FRP_Event.eventIsEvent)(dictField)(dictSemiring)(g)(da0)(t)(f(b)(db));
                                }));
                            });
                        };
                    };
                };
            };
        };
    };
};
var solve2$prime = function (dictField) {
    return solve2(dictField)((((dictField.EuclideanRing0()).CommutativeRing0()).Ring0()).Semiring0())(function (v) {
        return v(Control_Category.id(Control_Category.categoryFn));
    });
};
var switcher = function (b0) {
    return function (e) {
        return behavior(function (s) {
            return FRP_Event_Class.keepLatest(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(Control_Applicative.pure(FRP_Event.applicativeEvent)(sample(b0)(s)))(Data_Functor.map(FRP_Event.functorEvent)(function (b) {
                return sample(b)(s);
            })(e)));
        });
    };
};
var applyABehavior = function (dictFunctor) {
    return new Control_Apply.Apply(function () {
        return functorABehavior(dictFunctor);
    }, function (v) {
        return function (v1) {
            return function (e) {
                return v1(v(Data_Functor.map(dictFunctor)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(e)));
            };
        };
    });
};
var semigroupABehavior = function (dictFunctor) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyABehavior(dictFunctor))(Data_Semigroup.append(dictSemigroup)));
    };
};
var applicativeABehavior = function (dictFunctor) {
    return new Control_Applicative.Applicative(function () {
        return applyABehavior(dictFunctor);
    }, function (a) {
        return function (e) {
            return Data_Functor.map(dictFunctor)(Data_Function.applyFlipped(a))(e);
        };
    });
};
var monoidABehavior = function (dictFunctor) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupABehavior(dictFunctor)(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(applicativeABehavior(dictFunctor))(Data_Monoid.mempty(dictMonoid)));
    };
};
var animate = function (scene) {
    return function (render) {
        return FRP_Event.subscribe(sample_(FRP_Event.eventIsEvent)(scene)(FRP_Event_Time.animationFrame))(render);
    };
};
module.exports = {
    behavior: behavior,
    step: step,
    sample: sample,
    sampleBy: sampleBy,
    sample_: sample_,
    gate: gate,
    gateBy: gateBy,
    unfold: unfold,
    switcher: switcher,
    integral: integral,
    "integral'": integral$prime,
    derivative: derivative,
    "derivative'": derivative$prime,
    solve: solve,
    "solve'": solve$prime,
    solve2: solve2,
    "solve2'": solve2$prime,
    fixB: fixB,
    animate: animate,
    functorABehavior: functorABehavior,
    applyABehavior: applyABehavior,
    applicativeABehavior: applicativeABehavior,
    semigroupABehavior: semigroupABehavior,
    monoidABehavior: monoidABehavior
};
