// Generated by purs version 0.11.7
"use strict";
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Data_List_Types = require("../Data.List.Types");
var Data_Monoid = require("../Data.Monoid");
var Data_Ordering = require("../Data.Ordering");
var Data_Show = require("../Data.Show");
var Data_Unit = require("../Data.Unit");
var Neon_Data = require("../Neon.Data");
var Prelude = require("../Prelude");
var HasInspect = function (inspect) {
    this.inspect = inspect;
};
var unitHasInspect = new HasInspect(function (x) {
    return Data_Show.show(Data_Unit.showUnit)(x);
});
var stringHasInspect = new HasInspect(function (x) {
    return Data_Show.show(Data_Show.showString)(x);
});
var proxyHasInspect = new HasInspect(function (v) {
    return "Proxy";
});
var orderingHasInspect = new HasInspect(function (x) {
    return Data_Show.show(Data_Ordering.showOrdering)(x);
});
var objectHasInspect = new HasInspect(function (v) {
    return "{- Object -}";
});
var numberHasInspect = new HasInspect(function (x) {
    return Data_Show.show(Data_Show.showNumber)(x);
});
var intHasInspect = new HasInspect(function (x) {
    return Data_Show.show(Data_Show.showInt)(x);
});
var inspect = function (dict) {
    return dict.inspect;
};
var listHasInspect = function (dictHasInspect) {
    return new HasInspect(function (xs) {
        if (xs instanceof Data_List_Types.Nil) {
            return "Nil";
        };
        if (xs instanceof Data_List_Types.Cons) {
            return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ "(", Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(Data_List_Types.functorList)(inspect(dictHasInspect))(xs)), " : Nil)" ]);
        };
        throw new Error("Failed pattern match at Neon.Class.HasInspect line 49, column 16 - line 52, column 76: " + [ xs.constructor.name ]);
    });
};
var functionHasInspect = new HasInspect(function (v) {
    return "{- Function -}";
});
var errorHasInspect = new HasInspect(function (x) {
    return Data_Show.show(Control_Monad_Eff_Exception.showError)(x);
});
var charHasInspect = new HasInspect(function (x) {
    return Data_Show.show(Data_Show.showChar)(x);
});
var booleanHasInspect = new HasInspect(function (x) {
    return Data_Show.show(Data_Show.showBoolean)(x);
});
var arrayHasInspect = function (dictHasInspect) {
    return new HasInspect(function (xs) {
        if (xs.length === 0) {
            return "[]";
        };
        return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ "[", Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(",")(Data_Functor.map(Data_Functor.functorArray)(inspect(dictHasInspect))(xs)), "]" ]);
    });
};
module.exports = {
    inspect: inspect,
    HasInspect: HasInspect,
    arrayHasInspect: arrayHasInspect,
    booleanHasInspect: booleanHasInspect,
    charHasInspect: charHasInspect,
    errorHasInspect: errorHasInspect,
    functionHasInspect: functionHasInspect,
    intHasInspect: intHasInspect,
    listHasInspect: listHasInspect,
    numberHasInspect: numberHasInspect,
    objectHasInspect: objectHasInspect,
    orderingHasInspect: orderingHasInspect,
    proxyHasInspect: proxyHasInspect,
    stringHasInspect: stringHasInspect,
    unitHasInspect: unitHasInspect
};
