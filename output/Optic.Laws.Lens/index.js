// Generated by purs version 0.11.7
"use strict";
var Data_Const = require("../Data.Const");
var Data_Eq = require("../Data.Eq");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Identity = require("../Data.Identity");
var Optic_Getter = require("../Optic.Getter");
var Optic_Setter = require("../Optic.Setter");
var Optic_Types = require("../Optic.Types");
var Prelude = require("../Prelude");
var setSet = function (dictEq) {
    return function (l) {
        return function (s) {
            return function (x) {
                return function (y) {
                    return Data_Eq.eq(dictEq)(Optic_Setter.set(l(Data_Identity.functorIdentity))(y)(Optic_Setter.set(l(Data_Identity.functorIdentity))(x)(s)))(Optic_Setter.set(l(Data_Identity.functorIdentity))(y)(s));
                };
            };
        };
    };
};
var setGet = function (dictEq) {
    return function (l) {
        return function (s) {
            return function (x) {
                return Data_Eq.eq(dictEq)(Optic_Getter.view(l(Data_Const.functorConst))(Optic_Setter.set(l(Data_Identity.functorIdentity))(x)(s)))(x);
            };
        };
    };
};
var getSet = function (dictEq) {
    return function (l) {
        return function (s) {
            return Data_Eq.eq(dictEq)(Optic_Setter.set(l(Data_Identity.functorIdentity))(Optic_Getter.view(l(Data_Const.functorConst))(s))(s))(s);
        };
    };
};
var validLens = function (dictEq) {
    return function (dictEq1) {
        return function (l) {
            return function (s) {
                return function (x) {
                    return function (y) {
                        return function (z) {
                            return getSet(dictEq1)(function (dictFunctor) {
                                return l(dictFunctor);
                            })(s) && (setGet(dictEq)(function (dictFunctor) {
                                return l(dictFunctor);
                            })(s)(x) && setSet(dictEq1)(function (dictFunctor) {
                                return l(dictFunctor);
                            })(s)(y)(z));
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    validLens: validLens,
    getSet: getSet,
    setGet: setGet,
    setSet: setSet
};
