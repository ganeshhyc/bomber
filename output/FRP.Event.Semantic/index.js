// Generated by purs version 0.11.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Control_Plus = require("../Control.Plus");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Boolean = require("../Data.Boolean");
var Data_Bounded = require("../Data.Bounded");
var Data_Either = require("../Data.Either");
var Data_Filterable = require("../Data.Filterable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var FRP_Behavior = require("../FRP.Behavior");
var FRP_Event = require("../FRP.Event");
var FRP_Event_Class = require("../FRP.Event.Class");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Semantic = function (x) {
    return x;
};
var newtypeSemantic = new Data_Newtype.Newtype(function (n) {
    return n;
}, Semantic);
var merge = function (dictOrd) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return v;
            };
            if (v instanceof Data_List_Types.Nil) {
                return v1;
            };
            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                if (Data_Ord.lessThanOrEq(dictOrd)(v.value0.value0)(v1.value0.value0)) {
                    return new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value0.value0, v.value0.value1), merge(dictOrd)(v.value1)(v1));
                };
                if (Data_Boolean.otherwise) {
                    return new Data_List_Types.Cons(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1), merge(dictOrd)(v)(v1.value1));
                };
            };
            throw new Error("Failed pattern match at FRP.Event.Semantic line 128, column 1 - line 133, column 30: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var meaning = function (dictBounded) {
    return function (b) {
        return function (t) {
            var valueOf = function (dictPartial) {
                return function (v) {
                    var __unused = function (dictPartial1) {
                        return function ($dollar39) {
                            return $dollar39;
                        };
                    };
                    return __unused(dictPartial)((function () {
                        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                            return v.value0.value1;
                        };
                        throw new Error("Failed pattern match at FRP.Event.Semantic line 150, column 3 - line 150, column 45: " + [ v.constructor.name ]);
                    })());
                };
            };
            var once = function (t1) {
                return function (a) {
                    return new Data_List_Types.Cons(new Data_Tuple.Tuple(t1, a), Data_List_Types.Nil.value);
                };
            };
            return valueOf()(FRP_Behavior.sample(b)(once(t)(Control_Category.id(Control_Category.categoryFn))));
        };
    };
};
var latestAt = function (dictOrd) {
    return function (t) {
        return function (xs) {
            return Data_List.last(Data_List.takeWhile(function ($126) {
                return (function (v) {
                    return Data_Ord.lessThanOrEq(dictOrd)(v)(t);
                })(Data_Tuple.fst($126));
            })(xs));
        };
    };
};
var functorSemantic = new Data_Functor.Functor(function (f) {
    return function (m) {
        return Data_Functor.map(Data_List_Types.functorList)(Data_Functor.map(Data_Tuple.functorTuple)(f))(m);
    };
});
var filterableSemantic = new Data_Filterable.Filterable(function () {
    return functorSemantic;
}, function (p) {
    return function (v) {
        return Data_Filterable.filter(Data_Filterable.filterableList)(function ($127) {
            return p(Data_Tuple.snd($127));
        })(v);
    };
}, function (p) {
    return function (v) {
        return Data_Filterable.filterMap(Data_Filterable.filterableList)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(Data_Maybe.applicativeMaybe)(p))(v);
    };
}, function (p) {
    return function (v) {
        var go = function (v1) {
            return {
                yes: v1.yes,
                no: v1.no
            };
        };
        return go(Data_Filterable.partition(Data_Filterable.filterableList)(function ($128) {
            return p(Data_Tuple.snd($128));
        })(v));
    };
}, function (p) {
    return function (v) {
        var split = function (p$prime) {
            return function (v1) {
                var v2 = p$prime(v1.value1);
                if (v2 instanceof Data_Either.Left) {
                    return new Data_Either.Left(new Data_Tuple.Tuple(v1.value0, v2.value0));
                };
                if (v2 instanceof Data_Either.Right) {
                    return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0, v2.value0));
                };
                throw new Error("Failed pattern match at FRP.Event.Semantic line 189, column 30 - line 191, column 39: " + [ v2.constructor.name ]);
            };
        };
        var go = function (v1) {
            return {
                left: v1.left,
                right: v1.right
            };
        };
        return go(Data_Filterable.partitionMap(Data_Filterable.filterableList)(split(p))(v));
    };
});
var applySemantic = function (dictOrd) {
    return new Control_Apply.Apply(function () {
        return functorSemantic;
    }, function (v) {
        return function (v1) {
            var fy = function (v2) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Tuple.functorTuple)(function (v3) {
                    return v3(v2.value1);
                }))(latestAt(dictOrd)(v2.value0)(v));
            };
            var fx = function (v2) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Tuple.functorTuple)(v2.value1))(latestAt(dictOrd)(v2.value0)(v1));
            };
            return merge(dictOrd)(Data_Filterable.filterMap(Data_Filterable.filterableList)(fx)(v))(Data_Filterable.filterMap(Data_Filterable.filterableList)(fy)(v1));
        };
    });
};
var semigroupSemantic = function (dictOrd) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(Control_Apply.lift2(applySemantic(dictOrd))(Data_Semigroup.append(dictSemigroup)));
    };
};
var applicativeSemantic = function (dictBounded) {
    return new Control_Applicative.Applicative(function () {
        return applySemantic(dictBounded.Ord0());
    }, function (a) {
        return Data_List.singleton(new Data_Tuple.Tuple(Data_Bounded.bottom(dictBounded), a));
    });
};
var monoidSemantic = function (dictBounded) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupSemantic(dictBounded.Ord0())(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(applicativeSemantic(dictBounded))(Data_Monoid.mempty(dictMonoid)));
    };
};
var altSemantic = function (dictOrd) {
    return new Control_Alt.Alt(function () {
        return functorSemantic;
    }, function (v) {
        return function (v1) {
            return merge(dictOrd)(v)(v1);
        };
    });
};
var plusSemantic = function (dictOrd) {
    return new Control_Plus.Plus(function () {
        return altSemantic(dictOrd);
    }, Data_List_Types.Nil.value);
};
var alternativeSemantic = function (dictBounded) {
    return new Control_Alternative.Alternative(function () {
        return applicativeSemantic(dictBounded);
    }, function () {
        return plusSemantic(dictBounded.Ord0());
    });
};
var isEventSemantic = function (dictBounded) {
    return new FRP_Event_Class.IsEvent(function () {
        return alternativeSemantic(dictBounded);
    }, function () {
        return filterableSemantic;
    }, function (v) {
        return Partial_Unsafe.unsafeCrashWith("FRP.Event.Semantic: fix is not yet implemented");
    }, function (f) {
        return function (v) {
            return function (b0) {
                var step = function (b) {
                    return function (v1) {
                        var b$prime = f(v1.value1)(b);
                        return {
                            accum: b$prime,
                            value: new Data_Tuple.Tuple(v1.value0, b$prime)
                        };
                    };
                };
                return (Data_Traversable.mapAccumL(Data_List_Types.traversableList)(step)(b0)(v)).value;
            };
        };
    }, function (v) {
        var go = function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
                return v1.value0.value1;
            };
            if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Cons) {
                return Data_Semigroup.append(Data_List_Types.semigroupList)(Data_Filterable.filter(Data_Filterable.filterableList)(function ($129) {
                    return (function (v2) {
                        return Data_Ord.lessThan(dictBounded.Ord0())(v2)(v1.value1.value0.value0);
                    })(Data_Tuple.fst($129));
                })(v1.value0.value1))(go(v1.value1));
            };
            throw new Error("Failed pattern match at FRP.Event.Semantic line 211, column 5 - line 211, column 17: " + [ v1.constructor.name ]);
        };
        return go(v);
    }, function (v) {
        return function (v1) {
            var go = function (v2) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Tuple.functorTuple)(v2.value1))(latestAt(dictBounded.Ord0())(v2.value0)(v));
            };
            return Data_Filterable.filterMap(Data_Filterable.filterableList)(go)(v1);
        };
    });
};
module.exports = {
    Semantic: Semantic,
    newtypeSemantic: newtypeSemantic,
    functorSemantic: functorSemantic,
    applySemantic: applySemantic,
    applicativeSemantic: applicativeSemantic,
    altSemantic: altSemantic,
    plusSemantic: plusSemantic,
    alternativeSemantic: alternativeSemantic,
    semigroupSemantic: semigroupSemantic,
    monoidSemantic: monoidSemantic,
    filterableSemantic: filterableSemantic,
    isEventSemantic: isEventSemantic
};
