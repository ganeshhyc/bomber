// Generated by purs version 0.11.7
"use strict";
var Data_Array = require("../Data.Array");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Int_Bits = require("../Data.Int.Bits");
var Data_List = require("../Data.List");
var Neon_Class_HasEqual = require("../Neon.Class.HasEqual");
var Neon_Data = require("../Neon.Data");
var Prelude = require("../Prelude");
var HasAnd = function (and) {
    this.and = and;
};
var listHasAnd = function (dictHasEqual) {
    return new HasAnd(function (ys) {
        return function (xs) {
            return Data_List.intersectBy(function (x) {
                return function (y) {
                    return Neon_Class_HasEqual.equal(dictHasEqual)(y)(x);
                };
            })(xs)(ys);
        };
    });
};
var intHasAnd = new HasAnd(function (y) {
    return function (x) {
        return x & y;
    };
});
var booleanHasAnd = new HasAnd(function (y) {
    return function (x) {
        return x && y;
    };
});
var arrayHasAnd = function (dictHasEqual) {
    return new HasAnd(function (ys) {
        return function (xs) {
            return Data_Array.intersectBy(function (x) {
                return function (y) {
                    return Neon_Class_HasEqual.equal(dictHasEqual)(y)(x);
                };
            })(xs)(ys);
        };
    });
};
var and = function (dict) {
    return dict.and;
};
var functionHasAnd = function (dictHasAnd) {
    return new HasAnd(function (g) {
        return function (f) {
            return function (x) {
                return and(dictHasAnd)(g(x))(f(x));
            };
        };
    });
};
module.exports = {
    and: and,
    HasAnd: HasAnd,
    arrayHasAnd: arrayHasAnd,
    booleanHasAnd: booleanHasAnd,
    functionHasAnd: functionHasAnd,
    intHasAnd: intHasAnd,
    listHasAnd: listHasAnd
};
